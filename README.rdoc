== Movie Theater App

This project creates a basic platform that movie theater owners can use to implement online ticketing. There were 14 basic requirements included in the prompt (I have listed them at the end). I will walk through a high level summary of my goals, a description of the domain model, some UX/UI considerations, and a few decisions I made in development.

FOR TESTING PURPOSES, 4242424242424242 is included as a valid CC number.

<b>Summary of Goals</b>
1. Make sure all 14 specific deliverables are addressed and achieved
2. Build platform with flexibilty in mind. Make sure product is useful enough to hand over to a theater owner, and they could create some customization on their own.
3. Validations are critical- checking payment info, ticket and seat quantity, etc.
4. "Showtimes" are the core part of the UX. The "let's go see a movie tonight" experience should be easily addressed.

<b>Domain Model and Explanation</b>
1. <b>movie_theater:</b> Store basic information about the theater itself. Manager should be able to go in and customize: phone number, address, etc. A movie theater object is important for flexibility going forward. In the event other theaters wanted to use this product, all other things will feed from the movie theater class.

2. <b>ticket_offering:</b> Slightly beyond the scope of the requirements, but important for flexibilty and usability. Theaters do not sell one ticket type. They have matinee, child, senior, etc. It's important for a theater to be able to manage all their offerings.

3. <b>screening_room:</b> This is where we manage the amount of tickets that can be sold to a specfic showtime. Also important so the guest knows which theater to go to upon arriving at the theater.

4. <b>showtime:</b> This is one of the important join models of the platform. Connects a movie to a specific screen_room/theater. Has information about time, seating, etc.

5. <b>booking:</b> This is the other truly important join model in the app. It connects a group of tickets to a specific showtime. It's where we check cc information, user age, etc. It's also where the total price is set and the credit card would be charged. On booking save, that's when we can adjust seating available etc.

6. <b>ticket:</b> Another join model. This is what a user purchases. It has a FK to ticket_offering to determine price, etc. It has a FK to showtime, and an FK to booking. 

7. <b>movie:</b> Has information about the movie. Has many showtimes. Also has many bookings. Could have linked bookings through showtimes, but since we want to run stats on movie revenue, it's a bit easier to just connect it directly.

<b>Creative Decisions Made</b>
1. The focus of the UX is around showtimes. People search for movies by day, and most frequently want to go see a movie TODAY. That should be a key focus.
2. The ticket_offerings model creates a lot of complexity in the booking process. But it is critical for moving the project closer to a usable product. Theaters have matinees, child tickets, senior citizen pricing, etc. This needs to be modeled in, and included in the checkout process.
3. The theater manager should have a dashboard to update information and view sales stats.
4. A list of all orders, and orders by movie is a requirement. But some highlighted stats may be helpful as well (Total Revenue, Total tickets sold, etc.)
5. Will use Bootstrap to help with responsive design.
6. Sold out shows shouldn't just "disappear." It help creates demand and booking urgency.
7. On checkout, user should be able to view their total price. Also, inputting CC information should be seamless. Using dropdowns will make it easier on mobile.

<b>Some Development Decisions Made and Remaining Refactoring Opportunities</b>
1. I purposely decided to not have any nested resources. There are some potential opportunities for it, but I wanted to make sure there was enough flexibilty going forward. For example, given the current requirements, a booking could have been nested under showtime. However, if we ever moved to a shopping cart concept, and a user could buy multiple tickets to multiple movies, that would become an issue. A screening_room definitely could be nested under movie theater, but just something I have no refactored yet.
2. I had to hack together ticket creation, given the UX I desired. A user first selects the number of each type of ticket they want. I then store that information in a hash and pass it to the next screen (booking/new). On that screen, I basically re-submit that hash in the form with hidden fields. Once I know CC information is valid, and the booking is saved, then the ticket objects from the hash get created.
3. I am trying to work on writing tests, so I wrote a few for the booking model (to check CC validations). It's something I would like to build upon.
4. I was having trouble writing a custom scope (one that you pass a lambda), in order to check what day a showtime is (not the day and time). As a hack, I created a seperate column in the showtime field that just stores the day. I know this is bad, but it works for now. Something I will go back and improve for sure.
5. Just used gmail for mailers. Have rollbar set up to track production errors.
6. Set the time of the app to use CST. Simplifies some of the design and the logic for now.
7. Used AJAX to filter booking orders, but did not include it on the movie showtimes page yet.
8. Instead of writing custom validations for CC information, and email, I will leverage gems who have done this already. They may not be perfect, but they provide the most amount of protection against bogus orders, upon launch. Once payment processor is hooked in, it will probably be running the validations anyway.

<b>List of Requirements (Provided by LPL)</b>
1. Customers should be able to come to the site, see all movies playing with their showtimes.
2. Remember, seating is limited so a particular showtime should only have a limited number of seats.
3. Once a show sells out, a customer should no longer be able to buy tick
4. Also, the theater will be showing R-rated movies so make sure to check the customer's age before purchasing.
5. They should be able to add tickets for only one movie at a time so don't worry about a shopping cart.
6. When customers decide to buy their tickets, they should be able to checkout by entering their name, email, credit card, and expiration date.
7. We want to make sure we don't get any bogus orders, so please keep an eye out for any validations and make sure the user knows if there's a problem with the order.
8. We'll add a credit card processor later on, so don't integrate with Stripe.
9. Once the customer purchases their tickets, they should receive an email receipt.
10. We want to keep track of our sales, so the order information should be saved to the DB.
11. We'll also want to see all of the orders for each movie.
12. An index page showing all of the orders (across all movies).
13. We don't need any authentication on the app
14. We're not worried about custom visual design, so feel free to use any CSS framework, or roll your own. However, we need the site to work on mobile so keep that in mind.
